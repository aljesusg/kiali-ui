// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`userDropdown test should render UserDropdown correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserDropdown />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Uncontrolled(Dropdown)
        componentClass="li"
        id="user"
      >
        <DropdownToggle
          bsClass="dropdown-toggle"
          bsRole="toggle"
          className="nav-item-iconic"
          open={false}
          useAnchor={true}
        >
          <Icon
            name="user"
            type="pf"
          />
           
          jdoe
        </DropdownToggle>
        <DropdownMenu
          bsClass="dropdown-menu"
          bsRole="menu"
          pullRight={false}
        >
          <MenuItem
            bsClass="dropdown"
            disabled={false}
            divider={false}
            header={false}
            id="usermenu_logout"
            onClick={[Function]}
          >
            <Icon
              name="key"
              type="pf"
            />
             Logout
          </MenuItem>
        </DropdownMenu>
      </Uncontrolled(Dropdown)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <DropdownToggle
            bsClass="dropdown-toggle"
            bsRole="toggle"
            className="nav-item-iconic"
            open={false}
            useAnchor={true}
          >
            <Icon
              name="user"
              type="pf"
            />
             
            jdoe
          </DropdownToggle>,
          <DropdownMenu
            bsClass="dropdown-menu"
            bsRole="menu"
            pullRight={false}
          >
            <MenuItem
              bsClass="dropdown"
              disabled={false}
              divider={false}
              header={false}
              id="usermenu_logout"
              onClick={[Function]}
            >
              <Icon
                name="key"
                type="pf"
              />
               Logout
            </MenuItem>
          </DropdownMenu>,
        ],
        "componentClass": "li",
        "id": "user",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "dropdown-toggle",
            "bsRole": "toggle",
            "children": Array [
              <Icon
                name="user"
                type="pf"
              />,
              " ",
              "jdoe",
            ],
            "className": "nav-item-iconic",
            "open": false,
            "useAnchor": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "name": "user",
                "type": "pf",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            " ",
            "jdoe",
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "dropdown-menu",
            "bsRole": "menu",
            "children": <MenuItem
              bsClass="dropdown"
              disabled={false}
              divider={false}
              header={false}
              id="usermenu_logout"
              onClick={[Function]}
            >
              <Icon
                name="key"
                type="pf"
              />
               Logout
            </MenuItem>,
            "pullRight": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "dropdown",
              "children": Array [
                <Icon
                  name="key"
                  type="pf"
                />,
                " Logout",
              ],
              "disabled": false,
              "divider": false,
              "header": false,
              "id": "usermenu_logout",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "name": "key",
                  "type": "pf",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " Logout",
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Uncontrolled(Dropdown)
          componentClass="li"
          id="user"
        >
          <DropdownToggle
            bsClass="dropdown-toggle"
            bsRole="toggle"
            className="nav-item-iconic"
            open={false}
            useAnchor={true}
          >
            <Icon
              name="user"
              type="pf"
            />
             
            jdoe
          </DropdownToggle>
          <DropdownMenu
            bsClass="dropdown-menu"
            bsRole="menu"
            pullRight={false}
          >
            <MenuItem
              bsClass="dropdown"
              disabled={false}
              divider={false}
              header={false}
              id="usermenu_logout"
              onClick={[Function]}
            >
              <Icon
                name="key"
                type="pf"
              />
               Logout
            </MenuItem>
          </DropdownMenu>
        </Uncontrolled(Dropdown)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <DropdownToggle
              bsClass="dropdown-toggle"
              bsRole="toggle"
              className="nav-item-iconic"
              open={false}
              useAnchor={true}
            >
              <Icon
                name="user"
                type="pf"
              />
               
              jdoe
            </DropdownToggle>,
            <DropdownMenu
              bsClass="dropdown-menu"
              bsRole="menu"
              pullRight={false}
            >
              <MenuItem
                bsClass="dropdown"
                disabled={false}
                divider={false}
                header={false}
                id="usermenu_logout"
                onClick={[Function]}
              >
                <Icon
                  name="key"
                  type="pf"
                />
                 Logout
              </MenuItem>
            </DropdownMenu>,
          ],
          "componentClass": "li",
          "id": "user",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "dropdown-toggle",
              "bsRole": "toggle",
              "children": Array [
                <Icon
                  name="user"
                  type="pf"
                />,
                " ",
                "jdoe",
              ],
              "className": "nav-item-iconic",
              "open": false,
              "useAnchor": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "name": "user",
                  "type": "pf",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              " ",
              "jdoe",
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "dropdown-menu",
              "bsRole": "menu",
              "children": <MenuItem
                bsClass="dropdown"
                disabled={false}
                divider={false}
                header={false}
                id="usermenu_logout"
                onClick={[Function]}
              >
                <Icon
                  name="key"
                  type="pf"
                />
                 Logout
              </MenuItem>,
              "pullRight": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "dropdown",
                "children": Array [
                  <Icon
                    name="key"
                    type="pf"
                  />,
                  " Logout",
                ],
                "disabled": false,
                "divider": false,
                "header": false,
                "id": "usermenu_logout",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "name": "key",
                    "type": "pf",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " Logout",
              ],
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
